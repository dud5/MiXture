; # The Computer Language Benchmarks Game
; # $Id: my.linux.ini,v 1.10 2011-06-02 16:56:34 igouy-guest Exp $

;;; 1) WHERE ARE THE TOOLS NEEDED TO COMPILE OR RUN THE PROGRAMS?
;;; 2) WHAT COMMAND LINE SHOULD BE USED TO RUN THE PROGRAMS? 
;;; 3) WHICH PROGRAMS AND LANGUAGE IMPLEMENTATIONS SHOULD BE MEASURED?
;;; 4) WHAT DATA VALUES SHOULD THE PROGRAMS BE MEASURED FOR?
;;; 5) WHAT TOOLS SHOULD BE USED TO CHECK PROGRAM OUTPUT IS CORRECT?
;;; 6) WHAT COMMAND LINE OPTIONS SHOULD BE USED FOR SPECIFIC PROGRAMS?
;;; 7) HOW MANY MEASUREMENTS SHOULD BE MADE FOR EACH PROGRAM?



;;; 1) WHERE ARE THE TOOLS NEEDED TO COMPILE OR RUN THE PROGRAMS?

[tools]

; some of these need to be available to MAKE as well as substituted
; in commandlines, so we'll export them as shell variables
FSHARPC = fsharpc
MONORUN = mono
JAVASCRIPT = /usr/bin/d8


;;; 2) WHAT COMMAND LINE SHOULD BE USED TO RUN THE PROGRAMS? 

[commandlines]

; commandlines are split on spaces, so "a b" and 'a b' will be split

; %X %T %B %I %A in commandlines are replaced like this:
;
; nbody.python-4.python %X = nbody.python-4.python
; nbody.python-4.python %T = nbody
; nbody.python-4.python %B = nbody.python-4
; nbody.python-4.python %I = 4
;
; %A = [testrange] value or 0 when the program takes input from stdin

fsharp = $MONORUN %X.exe %A
javascript = $JAVASCRIPT --nodebugger %X -- %A


;;; 3) WHICH PROGRAMS AND LANGUAGE IMPLEMENTATIONS SHOULD BE MEASURED? 

[filters]

; ONLYDIRS explicitly listed are searched for source code files

onlydirs = 
 record_size_embed
; record_size_project
; fasta
; binarytrees
; mandelbrot
; spectralnorm
; nbody
; fannkuchredux
; number_of_values
; string_size
; array_size
; ALLOW these helper file extensions to be available unchanged 
; from the working directory - they will never be measured

allow = 
 js

; ONLY measure files with these extensions 
; if there are none, measure files with any extension not ALLOWed or IGNOREd

only = 
 fsharp
 javascript

; IGNORE files with these extensions, if there are no ONLY extensions

ignore =
 txt
 proto
 DS_Store
 fs
 dll
 exe
 js
 d8_history

[alias]
; x = y z - additionally measure source file x with implementations y and z
; javascript = v8



[build]

; compile source code (or rename source files) 
; using make with my.linux.Makefile

make =
 fsharp
 



;;; 4) WHAT DATA VALUES SHOULD THE PROGRAMS BE MEASURED FOR?

[testrange]

; One or more input values, programs will be run at least once
; with each input value replacing %A in the command line.
;
; Or when there's [testdata] for programs the input value
; makes up part of the filename - the file contents will be
; redirected to stdin.
;
; In this example, the input file for regexdna should be named
;    regexdna-input10000.txt
; and should be located in
;    bencher/tmp/regexdna 

binarytrees = 20
fannkuchredux = 11
fasta = 100000000
fastaredux = 250000 
knucleotide = 1000000
mandelbrot = 9000
number_of_values = 100 1000 10000 50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000 750000 800000 850000 900000 950000 1000000
string_size = 100000 1000000 10000000 15000000 20000000 25000000 30000000 35000000 40000000 45000000 50000000 55000000 60000000 65000000 70000000 75000000 80000000 85000000 90000000 95000000 100000000 105000000 110000000 115000000 120000000 125000000 130000000 135000000 140000000 145000000 150000000 155000000 160000000 165000000 170000000 175000000 180000000 185000000 190000000 195000000 200000000

record_size_project = 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500

record_size_embed = 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000

array_size = 1000 10000 15000 20000 25000 30000 35000 40000 45000 50000 55000 100000 105000 110000 115000 120000 125000 130000 135000 140000 145000 150000 155000 160000 165000 170000 175000 180000 185000 190000 195000 200000 205000 210000 215000 220000 225000 230000 235000 240000 245000 250000 255000 260000 265000 270000 275000 280000 285000 290000 295000 300000 305000 310000 315000 320000 325000 330000 335000 340000 345000 350000 355000 360000 365000 370000 375000 380000 385000 390000 395000 400000
nbody = 50000000 
regexdna = 1000000
spectralnorm = 8000


[testdata]
; knucleotide = /Users/edu/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss/tests/knucleotide-input.txt
knucleotide = ../knucleotide-input.txt
; regexdna = /Users/edu/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss/tests/regexdna/regexdna-input.txt
regexdna = ../regexdna-input.txt



;;; 5) WHAT TOOLS SHOULD BE USED TO CHECK PROGRAM OUTPUT IS CORRECT?

[outputcheck]

; Program output is usually checked against an "expected" output
; file. If there's no "expected" output file then the output of the
; first program measured for that test becomes the "expected" output
; - so make sure that output is correct!

; The default output check uses GNU diff.
; If GNU diff isn't found the default output check uses filecmp.cmp
;
; Other options are:
;    prevent output check, use GNU cmp, use ndiff



; prevent output being checked for the named test

notchecked =
 mandelbrot
 knucleotide
 regexdna
 binarytrees
 fasta	   
 spectralnorm
 nbody
 fannkuchredux
; nbody chameneosredux


; check binary output with cmp for the named test

binarycmp =
; mandelbrot



[ndiff_outputcheck]

; check output with ndiff and these parameters for the named test

;chameneosredux = -fields 2-10
;nbody = -abserr 1.0e-8



;;; 6) WHAT COMMAND LINE OPTIONS SHOULD BE USED FOR SPECIFIC PROGRAMS?

; ENVIRONMENT for specific tests
; some of these need to be available to MAKE as well as substituted
; in commandlines, so we'll export them as shell variables



[binarytrees]


[knucleotide]
MONOOPTS = -unsafe+

[nbody]
MONOOPTS = -r:/usr/local/lib/mono/4.5/Mono.Simd.dll


[pidigits]
MONOOPTS = -r:Mono.Security


;;; 7) HOW MANY MEASUREMENTS SHOULD BE MADE FOR EACH PROGRAM?

[measure]

; how many repeated measurements at the same [testrange] value?
runs = 10

; repeat measurements at every [testrange] value
; or just the largest? (True or False)
repeatevery = True

; how many seconds before we timeout a program?
maxtime = 10000

; only do repeated measurements for [testrange] values which
; took less than cutoff seconds
cutoff = 300

logfilemax = 102400

delay = 0.2 ; memory sampling delay for linux, not used for win32



;;; OVERRIDE DEFAULT LOCATIONS

[dirs]

; bencher
bencher = ~/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss/bencher

; root for source code directories of programs that should be measured
src = ~/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss/tests

; root for temporary files
tmp = ~/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss/tmp

; makefile path
makefile = ~/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss/makefiles/Makefile

; if not empty, somewhere all csv summary data files should be put
dat_sweep = ~/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss//summary/

; if not empty, somewhere all source code markup should be put
code_sweep = ~/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss//run_markup/

; if not empty, somewhere all program log text files should be put
log_sweep = ~/Dropbox/Estudios/Estudios/part_ii/dissertation/eval_diss//run_logs/
